What us Socket.io ?
=>socket Io is real time communication libarary .it allows instant messaging between server and client like(like chatting,notification,live updates).
it uses websocket (and fallback options)to keep persistent connection between client and server

Why use the Socket.io in laravel  ?
=>Laravel is PHP-based,and by default ,PHP is not persistent it proccess a request and ends .But in real-time apps need presistent connections.
So we use :-
-Laravel for backend logic(authentication,storing massage)
-Node.js +Socke.io to handle real-time-messaging
-Optional:Redis as a bridge between laravel ans Node.js


Tools we will Need
1-Laravel(backend)
2-Node.js+Socket.io(Real-time-serve)
3-Redis use to broadcaster
4-Laravel Echo( Client-Side JS library for listening)
5-Broadcasting setup in Laravel

High lavel flow of chat system
1-User type ans send a message(Frontend)
2-Laravel receives and stores in the Db.
3-Laravel Broadcaste the message using the an event
4-Node.js + Socket.io picks up the events and pushes into the client
5-All Connected users instantly see the new message

@Starting The Echo system in Websocket
>laravel-echo-server start

#I Just getting the Error of not displaying Message in real-time means until i refresh then message display
Solution:-
>in MessageController
> event(new MessageSent($message)); // fires immediately
>In javascript
>window.Echo.channel('chat')
     .listen('.message.sent', (e) => {
         console.log('âœ… Received message from Echo:', e);

         // Trigger a browser event to pass the message to the Blade frontend
         window.dispatchEvent(new CustomEvent('new-chat-message', { detail: e }));
     });




//clear Step by step installing and Setup of Webscoket:-//


1:- Installed Laravel WebSockets Package
>composer require beyondcode/laravel-websockets

2:- Configured .env for Broadcasting
>BROADCAST_DRIVER=pusher
 QUEUE_CONNECTION=redis

3:-Set Up broadcasting.php Config
>'pusher' => [
     'driver' => 'pusher',
     'key' => env('PUSHER_APP_KEY'),
     'secret' => env('PUSHER_APP_SECRET'),
     'app_id' => env('PUSHER_APP_ID'),
     'options' => [
         'cluster' => env('PUSHER_APP_CLUSTER'),
         'useTLS' => false,
         'host' => '127.0.0.1',
         'port' => 6001,
         'scheme' => 'http',
     ],
 ],


4:-Published WebSocket Config
>php artisan vendor:publish --tag=websockets-config


5:-Started the WebSocket Server
>php artisan websockets:serve

6:-Created a Broadcastable Event
>class MessageSent implements ShouldBroadcast

7:- Frontend Setup with Laravel Echo & Pusher(inside the Bootrsap/app.js)
>import Echo from 'laravel-echo';
 import Pusher from 'pusher-js';

 window.Pusher = Pusher;

 window.Echo = new Echo({
     broadcaster: 'pusher',
     key: 'local',
     cluster: 'mt1',
     wsHost: window.location.hostname,
     wsPort: 6001,
     forceTLS: false,
     disableStats: true,
     enabledTransports: ['ws'],
 });

8:-Listened to Events in JS
>window.Echo.channel('chat')
     .listen('.message.sent', (e) => {
         console.log('âœ… Received message from Echo:', e);
     });

 9. Triggered Event from Controller
 >event(new MessageSent($message));
________________________________________________________________________________________________________________________________________________________________________
IMPORTANT:-Laravel Reverb the new Websocket (Old version is"composer require beyondcode/laravel-websockets"abonded )
1:-. Install Laravel Reverb
>composer require laravel/reverb

2:-Publish the config
>php artisan reverb:install

3:-. Set your broadcast driver in .env
>BROADCAST_CONNECTION=reverb

4:- Start the Reverb WebSocket server
>php artisan reverb:start

5:-Create an event:...etc
